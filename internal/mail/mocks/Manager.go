// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mail "github.com/h44z/wg-portal/internal/mail"
	mock "github.com/stretchr/testify/mock"

	model "github.com/h44z/wg-portal/internal/model"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Send provides a mock function with given fields: ctx, subject, body, to, options
func (_m *Manager) Send(ctx context.Context, subject string, body string, to []string, options *mail.Options) error {
	ret := _m.Called(ctx, subject, body, to, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, *mail.Options) error); ok {
		r0 = rf(ctx, subject, body, to, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendConfigWithAttachment provides a mock function with given fields: ctx, user, peer, qr, cfg
func (_m *Manager) SendConfigWithAttachment(ctx context.Context, user *model.User, peer *model.Peer, qr io.Reader, cfg io.Reader) error {
	ret := _m.Called(ctx, user, peer, qr, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Peer, io.Reader, io.Reader) error); ok {
		r0 = rf(ctx, user, peer, qr, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendConfigWithLink provides a mock function with given fields: ctx, user, peer, link
func (_m *Manager) SendConfigWithLink(ctx context.Context, user *model.User, peer *model.Peer, link string) error {
	ret := _m.Called(ctx, user, peer, link)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Peer, string) error); ok {
		r0 = rf(ctx, user, peer, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
