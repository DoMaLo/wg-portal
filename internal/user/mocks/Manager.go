// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	model "github.com/h44z/wg-portal/internal/model"
	mock "github.com/stretchr/testify/mock"

	user "github.com/h44z/wg-portal/internal/user"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *Manager) CreateUser(_a0 *model.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: identifier
func (_m *Manager) DeleteUser(identifier model.UserIdentifier) error {
	ret := _m.Called(identifier)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserIdentifier) error); ok {
		r0 = rf(identifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveUser provides a mock function with given fields: id
func (_m *Manager) GetActiveUser(id model.UserIdentifier) (*model.User, error) {
	ret := _m.Called(id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(model.UserIdentifier) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserIdentifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveUsers provides a mock function with given fields:
func (_m *Manager) GetActiveUsers() ([]*model.User, error) {
	ret := _m.Called()

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func() []*model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields:
func (_m *Manager) GetAllUsers() ([]*model.User, error) {
	ret := _m.Called()

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func() []*model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteredUsers provides a mock function with given fields: filter
func (_m *Manager) GetFilteredUsers(filter user.Filter) ([]*model.User, error) {
	ret := _m.Called(filter)

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func(user.Filter) []*model.User); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.Filter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id
func (_m *Manager) GetUser(id model.UserIdentifier) (*model.User, error) {
	ret := _m.Called(id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(model.UserIdentifier) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserIdentifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashPassword provides a mock function with given fields: plain
func (_m *Manager) HashPassword(plain string) (string, error) {
	ret := _m.Called(plain)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(plain)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(plain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashedAuthentication provides a mock function with given fields: userId, hashedPassword
func (_m *Manager) HashedAuthentication(userId model.UserIdentifier, hashedPassword string) error {
	ret := _m.Called(userId, hashedPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserIdentifier, string) error); ok {
		r0 = rf(userId, hashedPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlaintextAuthentication provides a mock function with given fields: userId, plainPassword
func (_m *Manager) PlaintextAuthentication(userId model.UserIdentifier, plainPassword string) error {
	ret := _m.Called(userId, plainPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserIdentifier, string) error); ok {
		r0 = rf(userId, plainPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *Manager) UpdateUser(_a0 *model.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
