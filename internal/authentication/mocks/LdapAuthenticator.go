// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	authentication "github.com/h44z/wg-portal/internal/authentication"

	mock "github.com/stretchr/testify/mock"

	model "github.com/h44z/wg-portal/internal/model"
)

// LdapAuthenticator is an autogenerated mock type for the LdapAuthenticator type
type LdapAuthenticator struct {
	mock.Mock
}

// GetAllUserInfos provides a mock function with given fields: ctx
func (_m *LdapAuthenticator) GetAllUserInfos(ctx context.Context) ([]map[string]interface{}, error) {
	ret := _m.Called(ctx)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context) []map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfo provides a mock function with given fields: ctx, username
func (_m *LdapAuthenticator) GetUserInfo(ctx context.Context, username model.UserIdentifier) (map[string]interface{}, error) {
	ret := _m.Called(ctx, username)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserIdentifier) map[string]interface{}); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserIdentifier) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashedAuthentication provides a mock function with given fields: userId, hashedPassword
func (_m *LdapAuthenticator) HashedAuthentication(userId model.UserIdentifier, hashedPassword string) error {
	ret := _m.Called(userId, hashedPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserIdentifier, string) error); ok {
		r0 = rf(userId, hashedPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseUserInfo provides a mock function with given fields: raw
func (_m *LdapAuthenticator) ParseUserInfo(raw map[string]interface{}) (*authentication.AuthenticatorUserInfo, error) {
	ret := _m.Called(raw)

	var r0 *authentication.AuthenticatorUserInfo
	if rf, ok := ret.Get(0).(func(map[string]interface{}) *authentication.AuthenticatorUserInfo); ok {
		r0 = rf(raw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authentication.AuthenticatorUserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(raw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaintextAuthentication provides a mock function with given fields: userId, plainPassword
func (_m *LdapAuthenticator) PlaintextAuthentication(userId model.UserIdentifier, plainPassword string) error {
	ret := _m.Called(userId, plainPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserIdentifier, string) error); ok {
		r0 = rf(userId, plainPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistrationEnabled provides a mock function with given fields:
func (_m *LdapAuthenticator) RegistrationEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SynchronizationEnabled provides a mock function with given fields:
func (_m *LdapAuthenticator) SynchronizationEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
